{"version":3,"sources":["scriptMap.js"],"names":["addTo","communesData","map","L","setView","tileLayer","maxZoom","communesLayer","selectedCommunesCodinsee","ventes","totalVentes","clickedCommunes","clickedSections","getElementById","historyDiv","selectedSectionsCodinsee","displaySelectedSectionInfo","selectedSection","sectionNom","document","createElement","sectionCode","textContent","comsecTDiv","appendChild","code","filterCommunes","departementCode","communes","features","filter","commune","properties","startsWith","filterSections","communeCode","sections","section","id","select","addEventListener","innerHTML","sectionsNames","nom","join","sectionsInfo","length","communesInput","inputContainer","querySelector","sectionsInput","type","value","concat","readOnly","selectedCommune","ventesDansCetteCommune","venteCommunes","JSON","forEach","index","flatMap","vente","venteSections","parse","l_section","replace","venteParCommune","totalSecteur","substring","idnatmut","codtypbien","ventesDansCetteSection","anneemut","venteParSection","round","eachLayer","layer","sectionID","json","data","region","this","fetch","removeLayer","response","then","onEachFeature","click","feature","on","fillColor","filteredCommunes","alreadyClicked","geoJSON","communeNom","checked","push","setStyle","l_codinsee","sectionsLayer","Math","filteredSections","clickedSection","some","_leaflet_id"],"mappings":"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","file":"scriptMap.min.js","sourcesContent":["var map = L.map('map').setView([45.7, 3.15], 7);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n  maxZoom: 19,\n}).addTo(map);\nvar communesData;\nvar ventes;\nvar totalVentes = 0;\nvar clickedCommunes = [];\nvar clickedSections = [];  // Ajout du tableau pour stocker les sections cliquées\nvar historyDiv = document.getElementById('Historique');  // Ajout de la div Historique\nvar selectedCommunesCodinsee = [];\nvar selectedSectionsCodinsee = [];\nvar communesLayer;\nvar sectionsLayer;\nvar totalSecteur = 0;\nvar select = document.getElementById('region');\n\n\ndocument.getElementById('Count').addEventListener('click', function() {\n  if (clickedCommunes.length === 0) {\n    totalVentes = 0;\n    document.getElementById(\"NumberSell\").textContent = \"Total: \" + totalVentes;\n  }\n\n  // Récupérer la div avec l'id \"comsecT\"\n  var comsecTDiv = document.getElementById('comsecT');\n\n  // Supprimer les anciens éléments de la div \"comsecT\"\n  comsecTDiv.innerHTML = '';\n\n  // Créer un nouvel élément <p> pour afficher les noms des sections sélectionnées\n  var sectionsNames = selectedSectionsCodinsee.map(section => section.nom).join(', ');\n  var sectionsInfo = document.createElement('p');\n  sectionsInfo.textContent = \"Sections sélectionnées : \" + sectionsNames;\n  comsecTDiv.appendChild(sectionsInfo);\n\n  // Afficher les informations de la première section sélectionnée dans la div \"comsecT\"\n  if (selectedSectionsCodinsee.length > 0) {\n    displaySelectedSectionInfo(selectedSectionsCodinsee[0]);\n  }\n\n  // Autres actions à effectuer lorsque le bouton \"Count\" est cliqué...\n});\n\n// Fonction pour afficher les informations d'une section sélectionnée dans la div \"comsecT\"\nfunction displaySelectedSectionInfo(selectedSection) {\n  var comsecTDiv = document.getElementById('comsecT');\n\n  // Créer des éléments HTML pour afficher les informations de la section\n  var sectionNom = document.createElement('p');\n  sectionNom.textContent = 'Nom de la section: ' + selectedSection.nom;\n  comsecTDiv.appendChild(sectionNom);\n\n  var sectionCode = document.createElement('p');\n  sectionCode.textContent = 'Code de la section: ' + selectedSection.code;\n  comsecTDiv.appendChild(sectionCode);\n\n  // Ajouter d'autres informations si nécessaire\n}\n\n  \ndocument.getElementById('Export').addEventListener('click', function() {\n  // Récupérer le conteneur d'input\n  var inputContainer = document.querySelector('.pop-up-form .input-container');\n  \n  // Supprimer les anciens inputs\n  inputContainer.innerHTML = '';\n\n  // Créer un nouvel input pour les communes sélectionnées\n  var communesInput = document.createElement('input');\n  communesInput.type = 'text';\n  communesInput.value = selectedCommunesCodinsee.map(commune => `${commune.nom}: ${commune.code}`).join(', ');\n  communesInput.readOnly = true;  // Rendre l'input en lecture seule\n  inputContainer.appendChild(communesInput);\n\n  // Créer un nouvel input pour les sections sélectionnées\n  var sectionsInput = document.createElement('input');\n  sectionsInput.type = 'text';\n  sectionsInput.value = selectedSectionsCodinsee.map(section => `${section.nom}: ${section.code}`).join(', ');\n  sectionsInput.readOnly = true;  // Rendre l'input en lecture seule\n  inputContainer.appendChild(sectionsInput);\n\n\n  // Calculate totalVentes for selected communes\n  selectedCommunesCodinsee.forEach(selectedCommune => {\n    var ventesDansCetteCommune = ventes.flatMap(vente => {\n      var venteCommunes = JSON.parse(vente.l_codinsee.replace(/'/g, \"\\\"\"));\n      var venteSections = JSON.parse(vente.l_section.replace(/'/g, \"\\\"\"));\n\n      return venteCommunes.map((commune, index) => ({\n        id: commune,\n        section: venteSections[index],\n        vente: vente\n      }));\n    }).filter(venteParCommune => \n      venteParCommune.id === selectedCommune.code && \n      (venteParCommune.vente.idnatmut === \"1\" || venteParCommune.vente.idnatmut === \"4\") && \n      (venteParCommune.vente.codtypbien.startsWith('1') && venteParCommune.vente.codtypbien !== '14' || venteParCommune.vente.codtypbien === '21') && \n      venteParCommune.vente.anneemut >= \"2017\" && venteParCommune.vente.anneemut <= \"2020\"\n    );\n\n    totalSecteur += Math.round(ventesDansCetteCommune.length / 4);\n  });\n\n  // Calculate totalVentes for selected sections\n  selectedSectionsCodinsee.forEach(selectedSection => {\n    var sectionCode = selectedSection.code.substring(0, 5);\n    var sectionID = sectionCode + '; ' + selectedSection.code.substring(7);\n\n    var ventesDansCetteSection = ventes.flatMap(vente => {\n      var venteCommunes = JSON.parse(vente.l_codinsee.replace(/'/g, \"\\\"\"));\n      var venteSections = JSON.parse(vente.l_section.replace(/'/g, \"\\\"\"));\n\n      return venteCommunes.map((commune, index) => ({\n        id: commune + '000' + venteSections[index],\n        vente: vente\n      }));\n    }).filter(venteParSection => \n      venteParSection.id === sectionID && \n      (venteParSection.vente.idnatmut === \"1\" || venteParSection.vente.idnatmut === \"4\") && \n      (venteParSection.vente.codtypbien.startsWith('1') && venteParSection.vente.codtypbien !== '14' || venteParSection.vente.codtypbien === '21') && \n      venteParSection.vente.anneemut >= \"2017\" && venteParSection.vente.anneemut <= \"2020\"\n    );\n\n    totalSecteur += Math.round(ventesDansCetteSection.length / 4);\n  });\n\n  // Display the total sales\n  document.getElementById(\"TotalSecteur\").value = totalSecteur;\n});\n\n\n\nselect.addEventListener('change', function () {\n  var region = this.value;\n  map.eachLayer(function (layer) {\n    map.removeLayer(layer);\n  });\n  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    maxZoom: 19,\n  }).addTo(map);\n\n  fetch(`https://raw.githubusercontent.com/BryanLorin/geojsonBryan/main/${region}/departements-${region}.geojson`)\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (departements) {\n      L.geoJSON(departements, {\n        onEachFeature: function (feature, layer) {\n          layer.on('click', function () {\n            var departementCode = feature.properties.code;\n\n            fetch(`https://raw.githubusercontent.com/BryanLorin/geojsonBryan/main/${region}/mutations-${region}-${departementCode}.json`)\n              .then(response => response.json())\n              .then(data => {\n                ventes = data;\n              });\n\n            fetch(`https://raw.githubusercontent.com/BryanLorin/geojsonBryan/main/${region}/communes-${region}.geojson`)\n              .then(function (response) {\n                return response.json();\n              })\n              .then(function (communes) {\n                communesData = communes;\n                var filteredCommunes = filterCommunes(departementCode, communes);\n\n                if (communesLayer) {\n                  map.removeLayer(communesLayer);\n                }\n\n                communesLayer = L.geoJSON(filteredCommunes, {\n                  onEachFeature: function (feature, layer) {\n                    layer.on({\n                      click: function () {\n                       \n\t\t\t\t\t\tvar communeCode = feature.properties.code;\n        \t\t\t\tvar communeNom = feature.properties.nom;\n        \t\t\t\thistoryDiv.textContent = 'Nom: ' + communeNom ;\n       \n                        // Ajouter à la liste des communes sélectionnées si 'Create' est coché\n                        if(document.getElementById(\"Create\").checked) {\n                          // Créer un objet avec le code et le nom de la commune\n                          var commune = {\n                            code: communeCode,\n                            nom: feature.properties.nom  // Assumer que 'nom' est la propriété contenant le nom de la commune\n                          };\n                          selectedCommunesCodinsee.push(commune);\n                          layer.setStyle({ fillColor: 'blue' }); // Change la couleur de la commune sélectionnée\n                        }\n                      \n                        // Vérifier si la commune a déjà été cliquée\n                        var alreadyClicked = clickedCommunes.some(clickedCommune => \n                          clickedCommune._leaflet_id === layer._leaflet_id\n                        );\n\n                        if (alreadyClicked) {\n                          return;  // Si la commune a déjà été cliquée, ne rien faire\n                        }\n\n                        var ventesDansCetteCommune = ventes.flatMap(vente => {\n                          var venteCommunes = JSON.parse(vente.l_codinsee.replace(/'/g, \"\\\"\"));\n                          var venteSections = JSON.parse(vente.l_section.replace(/'/g, \"\\\"\"));\n                          \n                          return venteCommunes.map((commune, index) => ({\n                            id: commune,\n                            section: venteSections[index],\n                            vente: vente\n                          }));\n                        }).filter(venteParCommune => \n                          venteParCommune.id === communeCode && \n                          (venteParCommune.vente.idnatmut === \"1\" || venteParCommune.vente.idnatmut === \"4\") && \n                          (venteParCommune.vente.codtypbien.startsWith('1') && venteParCommune.vente.codtypbien !== '14' || venteParCommune.vente.codtypbien === '21') && \n                          venteParCommune.vente.anneemut >= \"2017\" && venteParCommune.vente.anneemut <= \"2020\"\n                        );\n\n                        if (document.getElementById(\"Communes\").checked) {\n                          if (document.getElementById(\"Count\").checked) {\n                            totalVentes += Math.round(ventesDansCetteCommune.length / 4);\n                            document.getElementById(\"NumberSell\").textContent = \"Total: \" + totalVentes;\n                            layer.setStyle({ fillColor: 'red' });\n                            clickedCommunes.push(layer);\n                          } else {\n                            totalVentes = Math.round(ventesDansCetteCommune.length / 4);\n                            document.getElementById(\"NumberSell\").textContent = \"Total: \" + totalVentes;\n                          }\n                        }\n\n                        if (document.getElementById(\"Sections\").checked) {\n                          fetch(`https://raw.githubusercontent.com/BryanLorin/geojsonBryan/main/${region}/sections-${region}-${departementCode}.json`)\n                            .then(function (response) {\n                              return response.json();\n                            })\n                            .then(function (sections) {\n                              var filteredSections = filterSections(communeCode, sections);\n\n                              if (sectionsLayer) {\n                                map.removeLayer(sectionsLayer);\n                              }\n\n                             sectionsLayer = L.geoJSON(filteredSections, {\n                              onEachFeature: function (feature, layer) {\n                                layer.on('click', function () {\n                                  var sectionID = feature.properties.id;\n\n                                  // Extraire le l_codinsee et l_section de l'ID de la section\n                                  var l_codinsee = sectionID.substring(0, 5);\n                                  var l_section = sectionID.substring(8);\n                          \n\n                                  if(document.getElementById(\"Create\").checked) {\n                                  var section = {\n                                    code: l_codinsee + '; ' + l_section,\n                                    nom: communesData.features.find(commune => commune.properties.code === l_codinsee).properties.nom\n                                  };\n                                  selectedSectionsCodinsee.push(section);\n                                  layer.setStyle({ fillColor: 'green' }); // Change la couleur de la section sélectionnée\n                                }\n\n\n                                  // Vérifier si la section a déjà été cliquée\n                                  var alreadyClicked = clickedSections.some(clickedSection => \n                                    clickedSection._leaflet_id === layer._leaflet_id\n                                  );\n\n                                  if (alreadyClicked) {\n                                    return;  // Si la section a déjà été cliquée, ne rien faire\n                                  }\n\n\n                                    var ventesDansCetteSection = ventes.flatMap(vente => {\n                                      var venteCommunes = JSON.parse(vente.l_codinsee.replace(/'/g, \"\\\"\"));\n                                      var venteSections = JSON.parse(vente.l_section.replace(/'/g, \"\\\"\"));\n                                      \n                                      return venteCommunes.map((commune, index) => ({\n                                        id: commune + '000' + venteSections[index],\n                                        vente: vente\n                                      }));\n                                    }).filter(venteParSection => \n                                      venteParSection.id === sectionID && \n                                      (venteParSection.vente.idnatmut === \"1\" || venteParSection.vente.idnatmut === \"4\") && \n                                      (venteParSection.vente.codtypbien.startsWith('1') && venteParSection.vente.codtypbien !== '14' || venteParSection.vente.codtypbien === '21') && \n                                      venteParSection.vente.anneemut >= \"2017\" && venteParSection.vente.anneemut <= \"2020\"\n                                    );\n\n                                    if (document.getElementById(\"Count\").checked) {\n                                      totalVentes += Math.round(ventesDansCetteSection.length / 4);\n                                      document.getElementById(\"NumberSell\").textContent = \"Total: \" + totalVentes;\n                                      layer.setStyle({ fillColor: 'red' });\n                                      clickedSections.push(layer);\n                                    } else {\n                                      totalVentes = Math.round(ventesDansCetteSection.length / 4);\n                                      document.getElementById(\"NumberSell\").textContent = \"Total: \" + totalVentes;\n                                    }\n                                  });\n                                },\n                              }).addTo(map);\n                            });\n                        }\n                      },\n                     \n                    });\n                  },\n                }).addTo(map);\n              });\n          });\n        },\n      }).addTo(map);\n    });\n});\n\nfunction filterCommunes(departementCode, communes) {\n  return communes.features.filter(function (commune) {\n    return commune.properties.code.startsWith(departementCode);\n  });\n}\n\nfunction filterSections(communeCode, sections) {\n  return sections.features.filter(function (section) {\n    return section.properties.id.startsWith(communeCode);\n  });\n}\n  // Reset totalVentes and clickedCommunes when reset button is clicked\ndocument.getElementById(\"reset\").addEventListener('click', function () {\n  totalVentes = 0;\n  document.getElementById(\"NumberSell\").textContent = \"\";\n  clickedCommunes.forEach(function (commune) {\n    commune.setStyle({ fillColor: 'blue' });  // Replace 'blue' with your original color\n  });\n  clickedCommunes = [];\n});\n"]}