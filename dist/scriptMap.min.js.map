{"version":3,"sources":["scriptMap.js"],"names":["addTo","communesData","map","L","setView","tileLayer","maxZoom","communesLayer","selectedCommunesCodinsee","ventes","totalVentes","clickedCommunes","clickedSections","getElementById","historyDiv","selectedSectionsCodinsee","filterCommunes","departementCode","communes","features","filter","commune","properties","code","startsWith","filterSections","communeCode","sections","section","id","document","length","addEventListener","textContent","inputContainer","querySelector","innerHTML","communesInput","type","join","createElement","readOnly","value","concat","nom","appendChild","sectionsInput","ventesDansCetteCommune","parse","vente","l_codinsee","venteSections","JSON","l_section","replace","index","venteCommunes","venteParCommune","selectedCommune","idnatmut","totalSecteur","Math","round","codtypbien","anneemut","selectedSection","sectionID","substring","venteParSection","region","ventesDansCetteSection","fetch","onEachFeature","layer","on","eachLayer","then","response","departements","geoJSON","removeLayer","feature","json","click","filteredCommunes","setStyle","alreadyClicked","communeNom","checked","push","some","clickedCommune","_leaflet_id","flatMap","fillColor","sectionsLayer","filteredSections","clickedSection","find","forEach"],"mappings":"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","file":"scriptMap.min.js","sourcesContent":["var map = L.map('map').setView([45.7, 3.15], 7);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n  maxZoom: 19,\n}).addTo(map);\nvar communesData;\nvar ventes;\nvar totalVentes = 0;\nvar clickedCommunes = [];\nvar clickedSections = [];  // Ajout du tableau pour stocker les sections cliquées\nvar historyDiv = document.getElementById('Historique');  // Ajout de la div Historique\nvar selectedCommunesCodinsee = [];\nvar selectedSectionsCodinsee = [];\nvar communesLayer;\nvar sectionsLayer;\nvar totalSecteur = 0;\nvar select = document.getElementById('region');\n\n\n\n\ndocument.getElementById('Count').addEventListener('click', function() {\n  if (clickedCommunes.length === 0) {\n    totalVentes = 0;\n    document.getElementById(\"NumberSell\", \"NumberSellform\").textContent = \"Total: \" + totalVentes;\n  }\n});\n  \ndocument.getElementById('Export').addEventListener('click', function() {\n  // Récupérer le conteneur d'input\n  var inputContainer = document.querySelector('.pop-up-form .input-container');\n  \n  // Supprimer les anciens inputs\n  inputContainer.innerHTML = '';\n\n  // Créer un nouvel input pour les communes sélectionnées\n  var communesInput = document.createElement('input');\n  communesInput.type = 'text';\n  communesInput.value = selectedCommunesCodinsee.map(commune => `${commune.nom}: ${commune.code}`).join(', ');\n  communesInput.readOnly = true;  // Rendre l'input en lecture seule\n  inputContainer.appendChild(communesInput);\n\n  // Créer un nouvel input pour les sections sélectionnées\n  var sectionsInput = document.createElement('input');\n  sectionsInput.type = 'text';\n  sectionsInput.value = selectedSectionsCodinsee.map(section => `${section.nom}: ${section.code}`).join(', ');\n  sectionsInput.readOnly = true;  // Rendre l'input en lecture seule\n  inputContainer.appendChild(sectionsInput);\n\n\n  // Calculate totalVentes for selected communes\n  selectedCommunesCodinsee.forEach(selectedCommune => {\n    var ventesDansCetteCommune = ventes.flatMap(vente => {\n      var venteCommunes = JSON.parse(vente.l_codinsee.replace(/'/g, \"\\\"\"));\n      var venteSections = JSON.parse(vente.l_section.replace(/'/g, \"\\\"\"));\n\n      return venteCommunes.map((commune, index) => ({\n        id: commune,\n        section: venteSections[index],\n        vente: vente\n      }));\n    }).filter(venteParCommune => \n      venteParCommune.id === selectedCommune.code && \n      (venteParCommune.vente.idnatmut === \"1\" || venteParCommune.vente.idnatmut === \"4\") && \n      (venteParCommune.vente.codtypbien.startsWith('1') && venteParCommune.vente.codtypbien !== '14' || venteParCommune.vente.codtypbien === '21') && \n      venteParCommune.vente.anneemut >= \"2017\" && venteParCommune.vente.anneemut <= \"2020\"\n    );\n\n    totalSecteur += Math.round(ventesDansCetteCommune.length / 4);\n  });\n\n  // Calculate totalVentes for selected sections\n  selectedSectionsCodinsee.forEach(selectedSection => {\n    var sectionCode = selectedSection.code.substring(0, 5);\n    var sectionID = sectionCode + '; ' + selectedSection.code.substring(7);\n\n    var ventesDansCetteSection = ventes.flatMap(vente => {\n      var venteCommunes = JSON.parse(vente.l_codinsee.replace(/'/g, \"\\\"\"));\n      var venteSections = JSON.parse(vente.l_section.replace(/'/g, \"\\\"\"));\n\n      return venteCommunes.map((commune, index) => ({\n        id: commune + '000' + venteSections[index],\n        vente: vente\n      }));\n    }).filter(venteParSection => \n      venteParSection.id === sectionID && \n      (venteParSection.vente.idnatmut === \"1\" || venteParSection.vente.idnatmut === \"4\") && \n      (venteParSection.vente.codtypbien.startsWith('1') && venteParSection.vente.codtypbien !== '14' || venteParSection.vente.codtypbien === '21') && \n      venteParSection.vente.anneemut >= \"2017\" && venteParSection.vente.anneemut <= \"2020\"\n    );\n\n    totalSecteur += Math.round(ventesDansCetteSection.length / 4);\n  });\n\n  // Display the total sales\n  document.getElementById(\"TotalSecteur\").value = totalSecteur;\n});\n\n\nselect.addEventListener('change', function () {\n  var region = this.value;\n  map.eachLayer(function (layer) {\n    map.removeLayer(layer);\n  });\n  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    maxZoom: 19,\n  }).addTo(map);\n\n  fetch(`https://raw.githubusercontent.com/BryanLorin/geojsonBryan/main/${region}/departements-${region}.geojson`)\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (departements) {\n      L.geoJSON(departements, {\n        onEachFeature: function (feature, layer) {\n          layer.on('click', function () {\n            var departementCode = feature.properties.code;\n\n            fetch(`https://raw.githubusercontent.com/BryanLorin/geojsonBryan/main/${region}/mutations-${region}-${departementCode}.json`)\n              .then(response => response.json())\n              .then(data => {\n                ventes = data;\n              });\n\n            fetch(`https://raw.githubusercontent.com/BryanLorin/geojsonBryan/main/${region}/communes-${region}.geojson`)\n              .then(function (response) {\n                return response.json();\n              })\n              .then(function (communes) {\n                communesData = communes;\n                var filteredCommunes = filterCommunes(departementCode, communes);\n\n                if (communesLayer) {\n                  map.removeLayer(communesLayer);\n                }\n\n                communesLayer = L.geoJSON(filteredCommunes, {\n                  onEachFeature: function (feature, layer) {\n                    layer.on({\n                      click: function () {\n                       \n\t\t\t\t\t\tvar communeCode = feature.properties.code;\n        \t\t\t\tvar communeNom = feature.properties.nom;\n        \t\t\t\thistoryDiv.textContent = 'Nom: ' + communeNom ;\n       \n                        // Ajouter à la liste des communes sélectionnées si 'Create' est coché\n                        if(document.getElementById(\"Create\").checked) {\n                          // Créer un objet avec le code et le nom de la commune\n                          var commune = {\n                            code: communeCode,\n                            nom: feature.properties.nom  // Assumer que 'nom' est la propriété contenant le nom de la commune\n                          };\n                          selectedCommunesCodinsee.push(commune);\n                          layer.setStyle({ fillColor: 'blue' }); // Change la couleur de la commune sélectionnée\n                        }\n                      \n                        // Vérifier si la commune a déjà été cliquée\n                        var alreadyClicked = clickedCommunes.some(clickedCommune => \n                          clickedCommune._leaflet_id === layer._leaflet_id\n                        );\n\n                        if (alreadyClicked) {\n                          return;  // Si la commune a déjà été cliquée, ne rien faire\n                        }\n\n                        var ventesDansCetteCommune = ventes.flatMap(vente => {\n                          var venteCommunes = JSON.parse(vente.l_codinsee.replace(/'/g, \"\\\"\"));\n                          var venteSections = JSON.parse(vente.l_section.replace(/'/g, \"\\\"\"));\n                          \n                          return venteCommunes.map((commune, index) => ({\n                            id: commune,\n                            section: venteSections[index],\n                            vente: vente\n                          }));\n                        }).filter(venteParCommune => \n                          venteParCommune.id === communeCode && \n                          (venteParCommune.vente.idnatmut === \"1\" || venteParCommune.vente.idnatmut === \"4\") && \n                          (venteParCommune.vente.codtypbien.startsWith('1') && venteParCommune.vente.codtypbien !== '14' || venteParCommune.vente.codtypbien === '21') && \n                          venteParCommune.vente.anneemut >= \"2017\" && venteParCommune.vente.anneemut <= \"2020\"\n                        );\n\n                        if (document.getElementById(\"Communes\").checked) {\n                          if (document.getElementById(\"Count\").checked) {\n                            totalVentes += Math.round(ventesDansCetteCommune.length / 4);\n                            document.getElementById(\"NumberSell\", \"NumberSellform\" ).textContent = \"Total: \" + totalVentes;\n                            layer.setStyle({ fillColor: 'red' });\n                            clickedCommunes.push(layer);\n                        } else {\n                            totalVentes = Math.round(ventesDansCetteCommune.length / 4);\n                            document.getElementById(\"NumberSell\", \"NumberSellform\").textContent = \"Total: \" + totalVentes;\n        \n                        }\n                      }                        \n\n                        if (document.getElementById(\"Sections\").checked) {\n                          fetch(`https://raw.githubusercontent.com/BryanLorin/geojsonBryan/main/${region}/sections-${region}-${departementCode}.json`)\n                            .then(function (response) {\n                              return response.json();\n                            })\n                            .then(function (sections) {\n                              var filteredSections = filterSections(communeCode, sections);\n\n                              if (sectionsLayer) {\n                                map.removeLayer(sectionsLayer);\n                              }\n\n                             sectionsLayer = L.geoJSON(filteredSections, {\n                              onEachFeature: function (feature, layer) {\n                                layer.on('click', function () {\n                                  var sectionID = feature.properties.id;\n\n                                  // Extraire le l_codinsee et l_section de l'ID de la section\n                                  var l_codinsee = sectionID.substring(0, 5);\n                                  var l_section = sectionID.substring(8);\n                          \n\n                                  if(document.getElementById(\"Create\").checked) {\n                                  var section = {\n                                    code: l_codinsee + '; ' + l_section,\n                                    nom: communesData.features.find(commune => commune.properties.code === l_codinsee).properties.nom\n                                  };\n                                  selectedSectionsCodinsee.push(section);\n                                  layer.setStyle({ fillColor: 'green' }); // Change la couleur de la section sélectionnée\n                                }\n\n\n                                  // Vérifier si la section a déjà été cliquée\n                                  var alreadyClicked = clickedSections.some(clickedSection => \n                                    clickedSection._leaflet_id === layer._leaflet_id\n                                  );\n\n                                  if (alreadyClicked) {\n                                    return;  // Si la section a déjà été cliquée, ne rien faire\n                                  }\n\n\n                                    var ventesDansCetteSection = ventes.flatMap(vente => {\n                                      var venteCommunes = JSON.parse(vente.l_codinsee.replace(/'/g, \"\\\"\"));\n                                      var venteSections = JSON.parse(vente.l_section.replace(/'/g, \"\\\"\"));\n                                      \n                                      return venteCommunes.map((commune, index) => ({\n                                        id: commune + '000' + venteSections[index],\n                                        vente: vente\n                                      }));\n                                    }).filter(venteParSection => \n                                      venteParSection.id === sectionID && \n                                      (venteParSection.vente.idnatmut === \"1\" || venteParSection.vente.idnatmut === \"4\") && \n                                      (venteParSection.vente.codtypbien.startsWith('1') && venteParSection.vente.codtypbien !== '14' || venteParSection.vente.codtypbien === '21') && \n                                      venteParSection.vente.anneemut >= \"2017\" && venteParSection.vente.anneemut <= \"2020\"\n                                    );\n\n                                    if (document.getElementById(\"Count\").checked) {\n                                      totalVentes += Math.round(ventesDansCetteSection.length / 4);\n                                      document.getElementById(\"NumberSell\", \"NumberSellform\").textContent = \"Total: \" + totalVentes;\n                                      layer.setStyle({ fillColor: 'red' });\n                                      clickedSections.push(layer);\n                                  } else {\n                                      totalVentes = Math.round(ventesDansCetteSection.length / 4);\n                                      document.getElementById(\"NumberSell\", \"NumberSellform\").textContent = \"Total: \" + totalVentes;\n                                  }\n                                  \n                                  });\n                                },\n                              }).addTo(map);\n                            });\n                        }\n                      },\n                     \n                    });\n                  },\n                }).addTo(map);\n              });\n          });\n        },\n      }).addTo(map);\n    });\n});\n\nfunction filterCommunes(departementCode, communes) {\n  return communes.features.filter(function (commune) {\n    return commune.properties.code.startsWith(departementCode);\n  });\n}\n\nfunction filterSections(communeCode, sections) {\n  return sections.features.filter(function (section) {\n    return section.properties.id.startsWith(communeCode);\n  });\n}\n  // Reset totalVentes and clickedCommunes when reset button is clicked\ndocument.getElementById(\"reset\").addEventListener('click', function () {\n  totalVentes = 0;\n  document.getElementById(\"NumberSell\", \"NumberSellform\").textContent = \"\";\n  clickedCommunes.forEach(function (commune) {\n    commune.setStyle({ fillColor: 'blue' });  // Replace 'blue' with your original color\n  });\n  clickedCommunes = [];\n});\n"]}